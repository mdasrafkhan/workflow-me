services:
  # Redis for queues and distributed locking
  redis:
    image: redis:7-alpine
    container_name: workflow-redis
    ports:
      - "16379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - workflow-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:15-alpine
    container_name: workflow-db
    environment:
      POSTGRES_USER: workflow_user
      POSTGRES_PASSWORD: workflow_password
      POSTGRES_DB: workflow_db
    ports:
      - "15432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - workflow-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U workflow_user -d workflow_db"]
      interval: 10s
      timeout: 5s
      retries: 5


  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    container_name: workflow-frontend
    ports:
      - "3000:3000"
    volumes:
      - ../frontend:/usr/src/app
      - /usr/src/app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
      - REACT_APP_API_URL=http://workflow-backend-1:4000
      - GENERATE_SOURCEMAP=false
    networks:
      - workflow-network
    restart: unless-stopped
    depends_on:
      - backend-1

  backend-test:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: workflow-backend-test
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Database Configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: workflow_user
      DB_PASSWORD: workflow_password
      DB_NAME: workflow_db

      # Database Connection Pool Configuration (Test)
      DB_POOL_MAX: 10
      DB_POOL_MIN: 2
      DB_POOL_ACQUIRE: 15000
      DB_POOL_IDLE: 5000
      DB_POOL_EVICT: 1000
      DB_CONNECTION_TIMEOUT: 5000
      DB_QUERY_TIMEOUT: 15000
      DB_STATEMENT_TIMEOUT: 30000
      DB_VALIDATION_INTERVAL: 15000
      DB_MAX_QUERY_TIME: 15000
      DB_KEEPALIVE_DELAY: 5000

      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 1
      REDIS_CACHE_DB: 2

      # Application Configuration
      NODE_ENV: test
      PORT: 4000
    command: ["npm", "test", "--", "workflow-orchestration-engine.spec.ts", "--watchAll=false", "--verbose"]
    networks:
      - workflow-network
    user: "1001:1001"

  # Backend Pod 1 (Main)
  backend-1:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: workflow-backend-1
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    environment:
      # Database Configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: workflow_user
      DB_PASSWORD: workflow_password
      DB_NAME: workflow_db

      # Database Connection Pool Configuration
      DB_POOL_MAX: 20
      DB_POOL_MIN: 5
      DB_POOL_ACQUIRE: 30000
      DB_POOL_IDLE: 10000
      DB_POOL_EVICT: 1000
      DB_CONNECTION_TIMEOUT: 10000
      DB_QUERY_TIMEOUT: 30000
      DB_STATEMENT_TIMEOUT: 60000
      DB_VALIDATION_INTERVAL: 30000
      DB_MAX_QUERY_TIME: 30000
      DB_KEEPALIVE_DELAY: 10000

      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
      REDIS_CACHE_DB: 1

      # Email Configuration (Development)
      SMTP_HOST: smtp.ethereal.email
      SMTP_PORT: 587
      SMTP_USER: ethereal.user@ethereal.email
      SMTP_PASS: ethereal.pass
      FROM_EMAIL: noreply@workflow.example.com

      # Application Configuration
      NODE_ENV: development
      PORT: 4000
      POD_ID: 1

      # Logging Configuration
      IOREDIS_DEBUG: ""
      REDIS_DEBUG: ""

      # Optimization Configuration
      WORKFLOW_EXECUTION_CONCURRENCY: 20
      WORKFLOW_DELAY_CONCURRENCY: 10
      WORKFLOW_SCHEDULER_CONCURRENCY: 1
      MAX_CONCURRENT_EXECUTIONS: 50
      DATABASE_BATCH_SIZE: 25
      DISTRIBUTED_LOCK_DEFAULT_TTL: 30000
      SCHEDULER_LOCK_TTL: 60000

      # Workflow Configuration
      WORKFLOW_BATCH_INTERVAL: 30
      WORKFLOW_MAX_RETRIES: 3
      WORKFLOW_DELAY_TOLERANCE: 1000

      # Additional Workflow Environment Variables
      WORKFLOW_EXECUTION_MAX_RETRIES: 3
      WORKFLOW_EXECUTION_RETRY_DELAY: 2000
      WORKFLOW_EXECUTION_REMOVE_ON_COMPLETE: 10
      WORKFLOW_EXECUTION_REMOVE_ON_FAIL: 5
      WORKFLOW_DELAY_MAX_RETRIES: 3
      WORKFLOW_DELAY_RETRY_DELAY: 2000
      WORKFLOW_DELAY_REMOVE_ON_COMPLETE: 10
      WORKFLOW_DELAY_REMOVE_ON_FAIL: 5
      WORKFLOW_SCHEDULER_MAX_RETRIES: 3
      WORKFLOW_SCHEDULER_RETRY_DELAY: 5000
      WORKFLOW_SCHEDULER_REMOVE_ON_COMPLETE: 5
      WORKFLOW_SCHEDULER_REMOVE_ON_FAIL: 3
      DISTRIBUTED_LOCK_MAX_RETRIES: 3
      DISTRIBUTED_LOCK_RETRY_DELAY: 100
      CLEANUP_INTERVAL: 3600000
      RETENTION_DAYS: 30
      SCHEDULER_CRON_EXPRESSION: '* * * * *'
      MAX_CONCURRENT_WORKFLOWS: 100
      BATCH_PROCESSING_SIZE: 20
    ports:
      - "4000:4000"
    volumes:
      - ../backend:/usr/src/app
      - /usr/src/app/node_modules
      - /usr/src/app/dist
    networks:
      - workflow-network
    restart: unless-stopped
    user: "1001:1001"
    command: ["npm", "run", "start:dev"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health/live"]
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 60s

  # Backend Pod 2 (Worker)
  backend-2:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: workflow-backend-2
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Database Configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: workflow_user
      DB_PASSWORD: workflow_password
      DB_NAME: workflow_db

      # Database Connection Pool Configuration
      DB_POOL_MAX: 20
      DB_POOL_MIN: 5
      DB_POOL_ACQUIRE: 30000
      DB_POOL_IDLE: 10000
      DB_POOL_EVICT: 1000
      DB_CONNECTION_TIMEOUT: 10000
      DB_QUERY_TIMEOUT: 30000
      DB_STATEMENT_TIMEOUT: 60000
      DB_VALIDATION_INTERVAL: 30000
      DB_MAX_QUERY_TIME: 30000
      DB_KEEPALIVE_DELAY: 10000

      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
      REDIS_CACHE_DB: 1

      # Email Configuration (Development)
      SMTP_HOST: smtp.ethereal.email
      SMTP_PORT: 587
      SMTP_USER: ethereal.user@ethereal.email
      SMTP_PASS: ethereal.pass
      FROM_EMAIL: noreply@workflow.example.com

      # Application Configuration
      NODE_ENV: development
      PORT: 4000
      POD_ID: 2

      # Logging Configuration
      IOREDIS_DEBUG: ""
      REDIS_DEBUG: ""

      # Optimization Configuration
      WORKFLOW_EXECUTION_CONCURRENCY: 20
      WORKFLOW_DELAY_CONCURRENCY: 10
      WORKFLOW_SCHEDULER_CONCURRENCY: 1
      MAX_CONCURRENT_EXECUTIONS: 50
      DATABASE_BATCH_SIZE: 25
      DISTRIBUTED_LOCK_DEFAULT_TTL: 30000
      SCHEDULER_LOCK_TTL: 60000

      # Workflow Configuration
      WORKFLOW_BATCH_INTERVAL: 30
      WORKFLOW_MAX_RETRIES: 3
      WORKFLOW_DELAY_TOLERANCE: 1000
    ports:
      - "4001:4000"
    volumes:
      - ../backend:/usr/src/app
      - /usr/src/app/node_modules
      - /usr/src/app/dist
    networks:
      - workflow-network
    restart: unless-stopped
    user: "1001:1001"
    command: ["npm", "run", "start:dev"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3


  adminer:
    image: adminer
    container_name: workflow-adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    networks:
      - workflow-network


  # Test Database (for running tests)
  postgres-test:
    image: postgres:15-alpine
    container_name: workflow-test-db
    environment:
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
      POSTGRES_DB: workflow_test
    ports:
      - "15433:5432"
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    networks:
      - workflow-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user -d workflow_test"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Workflow Test Runner
  workflow-tester:
    build:
      context: ../backend
      dockerfile: Dockerfile.test
    container_name: workflow-tester
    depends_on:
      postgres-test:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Test Database Configuration
      TEST_DB_HOST: postgres-test
      TEST_DB_PORT: 5432
      TEST_DB_USER: test_user
      TEST_DB_PASSWORD: test_password
      TEST_DB_NAME: workflow_test

      # Email Configuration (Test)
      SMTP_HOST: smtp.ethereal.email
      SMTP_PORT: 587
      SMTP_USER: ethereal.user@ethereal.email
      SMTP_PASS: ethereal.pass
      FROM_EMAIL: test@workflow.example.com

      NODE_ENV: test
    networks:
      - workflow-network
    profiles:
      - testing
    command: ["npm", "run", "test:workflow"]

volumes:
  postgres_data:
  postgres_test_data:
  redis_data:

networks:
  workflow-network:
    driver: bridge
